{
    "Exception w/1 custom property": {
        "prefix": "exception1",
        "scope": "csharp",
        "body": [
            "/// <summary>",
            "/// Represents a ${1:Name} exception."
            "/// </summary>",
            "public class ${1}Exception : Exception",
            "{",
            "    /// <summary>",
            "    /// Gets ${2:the contextual value for the current exception.}",
            "    /// </summary>",
            "    public ${3:PropertyType} ${4:PropertyName} { get; }",
            "",
            "    public ${1}Exception() { }",
            "",
            "    /// <summary>",
            "    /// Initializes a new <c>${1}Exception</c>.",
            "    /// </summary>",
            "    /// <param name=\"${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${2/(\\s*[a-z])(.*)/${1:/upcase}$2/}</param>",
            "    /// <param name=\"innerException\">The optional exception that is the cause of the current exception.</param>",
            "    public ${1}Exception(${3} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? innerException = null) : base(null, innerException) => ${4} = ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/};",
            "",
            "    /// <summary>",
            "    /// Initializes a new <c>${1}Exception</c>.",
            "    /// </summary>",
            "    /// <param name=\"${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${2/(\\s*[a-z])(.*)/${1:/upcase}$2/}</param>",
            "    /// <param name=\"message\">The message that describes the error.</param>",
            "    /// <param name=\"innerException\">The optional exception that is the cause of the current exception.</param>",
            "    public ${1}Exception(${3} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, string message, Exception? innerException = null) : base(message, innerException) => ${4} = ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/};",
            "}"
        ],
        "description": "Exception with 1 custom property."
    },
    "Exception w/2 custom properties": {
        "prefix": "exception2",
        "scope": "csharp",
        "body": [
            "/// <summary>",
            "/// Represents a ${1:Name} exception."
            "/// </summary>",
            "public class ${1}Exception : Exception",
            "{",
            "    /// <summary>",
            "    /// Gets ${2:the first contextual value for the current exception.}",
            "    /// </summary>",
            "    public ${3:Property1Type} ${4:Property1Name} { get; }",
            "",
            "    /// <summary>",
            "    /// Gets ${5:the second contextual value for the current exception.}",
            "    /// </summary>",
            "    public ${6:Property2Type} ${7:Property2Name} { get; }",
            "",
            "    public ${1}Exception() { }",
            "",
            "    /// <summary>",
            "    /// Initializes a new <c>${1}Exception</c>.",
            "    /// </summary>",
            "    /// <param name=\"${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${2/(\\s*[a-z])(.*)/${1:/upcase}$2/}</param>",
            "    /// <param name=\"${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${5/(\\s*[a-z])(.*)/${1:/upcase}$2/}</param>",
            "    /// <param name=\"innerException\">The optional exception that is the cause of the current exception.</param>",
            "    public ${1}Exception(${3} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${6} ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? innerException = null) : base(null, innerException) =>",
            "        (${4}, ${7}) = (${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/});",
            "",
            "    /// <summary>",
            "    /// Initializes a new <c>${1}Exception</c>.",
            "    /// </summary>",
            "    /// <param name=\"${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${2/(\\s*[a-z])(.*)/${1:/upcase}$2/}</param>",
            "    /// <param name=\"${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${5/(\\s*[a-z])(.*)/${1:/upcase}$2/}</param>",
            "    /// <param name=\"message\">The message that describes the error.</param>",
            "    /// <param name=\"innerException\">The optional exception that is the cause of the current exception.</param>",
            "    public ${1}Exception(${3} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${6} ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, string message, Exception? innerException = null) : base(message, innerException) =>",
            "        (${4}, ${7}) = (${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/});",
            "}"
        ],
        "description": "Exception with 2 custom properties."
    },
    "Exception w/3 custom properties": {
        "prefix": "exception3",
        "scope": "csharp",
        "body": [
            "/// <summary>",
            "/// Represents a ${1:Name} exception."
            "/// </summary>",
            "public class ${1}Exception : Exception",
            "{",
            "    /// <summary>",
            "    /// Gets ${2:the first contextual value for the current exception.}",
            "    /// </summary>",
            "    public ${3:Property1Type} ${4:Property1Name} { get; }",
            "",
            "    /// <summary>",
            "    /// Gets ${5:the second contextual value for the current exception.}",
            "    /// </summary>",
            "    public ${6:Property2Type} ${7:Property2Name} { get; }",
            "",
            "    /// <summary>",
            "    /// Gets ${8:the third contextual value for the current exception.}",
            "    /// </summary>",
            "    public ${9:Property3Type} ${10:Property3Name} { get; }",
            "",
            "    public ${1}Exception() { }",
            "",
            "    /// <summary>",
            "    /// Initializes a new <c>${1}Exception</c>.",
            "    /// </summary>",
            "    /// <param name=\"${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${2/(\\s*[a-z])(.*)/${1:/upcase}$2/}</param>",
            "    /// <param name=\"${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${5/(\\s*[a-z])(.*)/${1:/upcase}$2/}</param>",
            "    /// <param name=\"${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${8/(\\s*[a-z])(.*)/${1:/upcase}$2/}</param>",
            "    /// <param name=\"innerException\">The optional exception that is the cause of the current exception.</param>",
            "    public ${1}Exception(${3} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${6} ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${9} ${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, Exception? innerException = null) : base(null, innerException) =>",
            "        (${4}, ${7}) = (${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/});",
            "",
            "    /// <summary>",
            "    /// Initializes a new <c>${1}Exception</c>.",
            "    /// </summary>",
            "    /// <param name=\"${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${2/(\\s*[a-z])(.*)/${1:/upcase}$2/}</param>",
            "    /// <param name=\"${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${5/(\\s*[a-z])(.*)/${1:/upcase}$2/}</param>",
            "    /// <param name=\"${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}\">${8/(\\s*[a-z])(.*)/${1:/upcase}$2/}</param>",
            "    /// <param name=\"message\">The message that describes the error.</param>",
            "    /// <param name=\"innerException\">The optional exception that is the cause of the current exception.</param>",
            "    public ${1}Exception(${3} ${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${6} ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${9} ${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, string message, Exception? innerException = null) : base(message, innerException) =>",
            "        (${4}, ${7}) = (${4/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${7/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}, ${10/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/});",
            "}"
        ],
        "description": "Exception with 3 custom properties."
    },
    "Property and backing field": {
        "prefix": "propfull",
        "scope": "csharp",
        "body": [
            "#region ${1:PropertyName} Property",
            "",
            "private ${2:Type} _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/}$0;",
            "",
            "/// <summary>",
            "/// ${3:description}",
            "/// </summary>",
            "public ${2} ${1}",
            "{",
            "    get => _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/};",
            "    set => _${1/(\\s*[A-Z]+)(.*)/${1:/downcase}$2/} = value;",
            "}",
            "",
            "#endregion"
        ],
        "description": "Property and backing field"
    },
    "#pragma warning disable": {
        "prefix": "pragma-warning-disable",
        "scope": "csharp",
        "body": [
            "#pragma warning disable ${1:Code}",
            "${TM_SELECTED_TEXT}$0",
            "#pragma warning restore ${1}"
        ],
        "description": "Disable Warning(s)"
    },
    "Monitor Enter/Exit": {
        "prefix": "monitor-enter-exit",
        "scope": "csharp",
        "body": [
            "Monitor.Enter(SyncRoot);",
            "try",
            "{",
            "    ${TM_SELECTED_TEXT}$0",
            "}",
            "finally { Monitor.Exit(SyncRoot); }"
        ]
    }
}
